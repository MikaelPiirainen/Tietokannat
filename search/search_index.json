{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tietokannat TTC2020 - Harjoitusty\u00f6 \u00b6 Esittely video: Videon linkki Suunnitelma \u00b6 Vaatimusm\u00e4\u00e4rittely \u00b6 Elokuvatietokanta \"elokuva_db\" -tietokanta Ty\u00f6ryhm\u00e4: Mikael Piirainen AA2799 Versio 1.0 1. Johdanto Tarkoituksena suunnitella ja luoda tietokanta, joka sis\u00e4lt\u00e4\u00e4 tietoa elokuvista, niiden arvosteluista ja n\u00e4yttelij\u00f6ist\u00e4 ja muusta. Tietokanta luodaan harjoitusty\u00f6n\u00e4 TTC2020 kurssilla, jota opettaa Ari Rantala. 2. Yleiskuvaus Tietokanta ty\u00f6stet\u00e4\u00e4n lokaalisti ja siirret\u00e4\u00e4n omalle palvelimelle, kun se on valmis. Tietokantaa varten luodaan k\u00e4ytt\u00f6liittym\u00e4, jolla voidaan hakea tietoja verkkosivulle. Toteutus tehd\u00e4\u00e4n MySQL Workbench:ill\u00e4 sek\u00e4 k\u00e4ytt\u00f6liittym\u00e4 tehd\u00e4\u00e4n PHP-ohjelmointi kielell\u00e4. Dokumentaatio kirjoitetaan GitHubiin ja julkaistaan sivustona hy\u00f6dynt\u00e4en MkDocs:ia. 3. Toiminnot Pakolliset toiminnot: Elokuvien tietojen tallennus Arvostelujen teko Elokuvien haku tietokannasta K\u00e4siteanalyysi \u00b6 K\u00e4site-ehdokkaat: Taulu Taulu Taulu Taulu Taulu ElokuvaID ElokuvaID Ohjaaja N\u00e4yttelij\u00e4t Arvostelu KategoriaID ElokuvaNimi ElokuvaNimi N\u00e4yttelij\u00e4 Arvostelija KategoriaNimi Kuvaus Kuvaus Vuosi Vuosi Ohjaaja Kesto N\u00e4yttelij\u00e4 Arvostelija Arvostelu KategoriaID KategoriaNimi Kesto N\u00e4yttelij\u00e4t Visuaalinen hahmotus ja lis\u00e4\u00e4 k\u00e4sitteit\u00e4: Hahmotus tehty draw.io sovelluksella. Perustelut ratkaisuille: Elokuva ja N\u00e4yttelij\u00e4 tauluilla on moni-moneen yhteys ja siihen syntyy liitostaulu N\u00e4yttelij\u00e4t. Is\u00e4nt\u00e4taulujen p\u00e4\u00e4avaimet toimivat liitostaulun viiteavaimina. Elokuvalla voi olla useita n\u00e4yttelij\u00f6it\u00e4 ja n\u00e4yttelij\u00e4t voivat olla useissa elokuvissa. Elokuva ja Arvostelija tauluilla samat perustelut kuin Elokuva - N\u00e4yttelij\u00e4tauluilla, lis\u00e4ksi liitostauluun lis\u00e4t\u00e4\u00e4n arvosana. Elokuva ja Kategoria tauluilla on yksi-moneen yhteys. Elokuva kuuluu kategoriaa ja kategoriaan voi kuulua useita elokuvia. (Tiedostan, ett\u00e4 useilla elokuvilla saatta olla monia kategorioita, mutta haluan t\u00e4h\u00e4n tietokantaan vain \"p\u00e4\u00e4 kategorian\"). Elokuva ja Ohjaaja tauluilla on yksi-moneen yhteys. Elokuvalla on yksi ohjaaja ja ohjaaja on voinut tehd\u00e4 monta elokuvaa. (T\u00e4m\u00e4 on yleisin elokuvasceness\u00e4, vaikkakin poikkeuksiakin l\u00f6ytyy: \"Russo Brothers: Avengers: Infinity War & Endgame, The Wachowskis: Matrix 1-3) ER-kaavio \u00b6 ER-kaavio tehty MySQL Workbenchi:ll\u00e4. Luovuin \"kansalaisuudesta\", koska sille pit\u00e4isi olla oma taulunsa, mutta se ei ole niin v\u00e4ltt\u00e4m\u00e4t\u00f6n elokuvatietokannassa. Tietokannan toteutus \u00b6 Tietokannan luonti \u00b6 Tietokanta luodaan Workbenchin FORWARD ENGINEERING optiolla. Tietokanta ja taulut onnistuivat. Tietojen lis\u00e4ys tauluihin \u00b6 Nyt kun tietokanta on luotu onnistuneesti, niin sinne voidaan lis\u00e4t\u00e4 dataa. Tietojen lis\u00e4ys Kategoria tauluun: Tietojen lis\u00e4ys Ohjaaja tauluun. Tietojen lis\u00e4ys Nayttelija tauluun. Tietojen lis\u00e4ys Elokuva tauluun. Tietojen lis\u00e4ys Nayttelijat tauluun. Tietojen lis\u00e4ys Arvostelija tauluun. Tietojen lis\u00e4ys Arvostelu tauluun. SQL-skripti \u00b6 Tietokannan luonti skripti. -- ----------------------------------------------------- -- Schema elokuva_db -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS ` elokuva_db ` ; -- Luo kyseisen tietokannan, jos sit\u00e4 ei ole USE ` elokuva_db ` ; -- Ottaa luodun tietokannan k\u00e4ytt\u00f6\u00f6n tulevia komentoja varten -- ----------------------------------------------------- -- Table `Kategoria` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Kategoria ` ( -- Luo taulun Kategoria, jos sit\u00e4 ei ole ` KategoriaID ` INT NOT NULL , -- INT (numero) tyyppinen sarake ` KategoriaNimi ` VARCHAR ( 64 ) NOT NULL , -- Vaihtelevamerkki maksimissaan 64 merkki\u00e4 sarake PRIMARY KEY ( ` KategoriaID ` )) -- Taulun p\u00e4\u00e4avaimeksi valitaan KategoriaID ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Ohjaaja` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Ohjaaja ` ( ` OhjaajaID ` INT NOT NULL , ` OhjaajaNimi ` VARCHAR ( 64 ) NOT NULL , ` Ika ` INT ( 3 ) NOT NULL , -- INT on rajattu vain kolmilukuiseksi PRIMARY KEY ( ` OhjaajaID ` )) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Elokuva` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Elokuva ` ( ` ElokuvaID ` INT NOT NULL , ` OhjaajaID ` INT NOT NULL , ` KategoriaID ` INT NOT NULL , ` ElokuvaNimi ` VARCHAR ( 128 ) NOT NULL , ` Vuosi ` YEAR NOT NULL , -- sarake johon voi laittaa vain vuosiluvun ` Kesto ` INT ( 3 ) NOT NULL , ` Kuvaus ` VARCHAR ( 512 ) NOT NULL , PRIMARY KEY ( ` ElokuvaID ` ), INDEX ` fk_Elokuva_Kategoria1_idx ` ( ` KategoriaID ` ASC ), -- viitetaulujen m\u00e4\u00e4ritys INDEX ` fk_Elokuva_Ohjaaja1_idx ` ( ` OhjaajaID ` ASC ), CONSTRAINT ` fk_Elokuva_Kategoria1 ` FOREIGN KEY ( ` KategoriaID ` ) REFERENCES ` Kategoria ` ( ` KategoriaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Elokuva_Ohjaaja1 ` FOREIGN KEY ( ` OhjaajaID ` ) -- Ohjaajan id:t\u00e4 ei toimintaa poiston tai p\u00e4ivityksen yhteydess\u00e4 REFERENCES ` Ohjaaja ` ( ` OhjaajaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table Nayttelija` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Nayttelija ` ( ` NayttelijaID ` INT NOT NULL , ` NayttelijaNimi ` VARCHAR ( 64 ) NOT NULL , ` Ika ` INT ( 3 ) NOT NULL , PRIMARY KEY ( ` NayttelijaID ` )) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Nayttelijat` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Nayttelijat ` ( ` NayttelijaID ` INT NOT NULL , ` ElokuvaID ` INT NOT NULL , PRIMARY KEY ( ` NayttelijaID ` , ` ElokuvaID ` ), INDEX ` fk_Nayttelija_has_Elokuva_Elokuva1_idx ` ( ` ElokuvaID ` ASC ), INDEX ` fk_Nayttelija_has_Elokuva_Nayttelija_idx ` ( ` NayttelijaID ` ASC ), CONSTRAINT ` fk_Nayttelija_has_Elokuva_Nayttelija ` FOREIGN KEY ( ` NayttelijaID ` ) REFERENCES ` Nayttelija ` ( ` NayttelijaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Nayttelija_has_Elokuva_Elokuva1 ` FOREIGN KEY ( ` ElokuvaID ` ) REFERENCES ` Elokuva ` ( ` ElokuvaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Arvostelija` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Arvostelija ` ( ` ArvostelijaID ` INT NOT NULL , ` ArvostelijaNimi ` VARCHAR ( 32 ) NOT NULL , PRIMARY KEY ( ` ArvostelijaID ` )) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Arvostelu` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Arvostelu ` ( ` ArvostelijaID ` INT NOT NULL , ` ElokuvaID ` INT NOT NULL , ` Arvosana ` INT ( 10 ) NOT NULL , PRIMARY KEY ( ` ArvostelijaID ` , ` ElokuvaID ` ), INDEX ` fk_Arvostelija_has_Elokuva_Elokuva1_idx ` ( ` ElokuvaID ` ASC ), INDEX ` fk_Arvostelija_has_Elokuva_Arvostelija1_idx ` ( ` ArvostelijaID ` ASC ), CONSTRAINT ` fk_Arvostelija_has_Elokuva_Arvostelija1 ` FOREIGN KEY ( ` ArvostelijaID ` ) REFERENCES ` Arvostelija ` ( ` ArvostelijaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Arvostelija_has_Elokuva_Elokuva1 ` FOREIGN KEY ( ` ElokuvaID ` ) REFERENCES ` Elokuva ` ( ` ElokuvaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB ; -- Taulut tehty, t\u00e4st\u00e4 alkaa tietojen lis\u00e4ys INSERT INTO Kategoria ( KategoriaID , KategoriaNimi ) VALUES -- Lis\u00e4\u00e4 kategoria tauluun kyseiset arvot ( 1 , \"Action\" ), ( 2 , \"Crime\" ), ( 3 , \"Sci-Fi\" ), ( 4 , \"Space Opera\" ); INSERT INTO Ohjaaja ( OhjaajaID , OhjaajaNimi , Ika ) VALUES ( 1 , \"Cristopher Nolan\" , 47 ), ( 2 , \"Quentin Tarantino\" , 58 ), ( 3 , \"The Wachowskis\" , 55 ), ( 4 , \"George Lucas\" , 76 ); INSERT INTO Nayttelija ( NayttelijaID , NayttelijaNimi , Ika ) VALUES ( 1 , \"Christian Bale\" , 47 ), ( 2 , \"John Travolta\" , 67 ), ( 3 , \"Leonardo DiCaprio\" , 46 ), ( 4 , \"Keanu Reeves\" , 56 ), ( 5 , \"Mark Hamill\" , 69 ); INSERT INTO Elokuva ( ElokuvaID , OhjaajaID , KategoriaID , ElokuvaNimi , Vuosi , Kesto , Kuvaus ) VALUES ( 1 , 1 , 1 , \"The Dark Knight\" , 2008 , 152 , \"Christopher Nolanin ohjaama Batman trilogian toinen osa, jossa Batman kohtaa arkkivihollisensa Jokerin.\" ), ( 2 , 2 , 2 , \"Pulp Fiction\" , 1994 , 154 , \"Quentin Tarantinon klassikko-elokuva, joka on koostumus huumorista ja vakivallasta.\" ), ( 3 , 1 , 1 , \"Inception\" , 2010 , 148 , \"Christopher Nolandin ohjaama ja kasikirjoittama mielta mullistava seikkailu.\" ), ( 4 , 3 , 3 , \"Matrix\" , 1999 , 136 , \"Wachowskiesin ohjaama Sci-Fi elokuva kertoo sankari Neosta, joka huomaakin etta kaikki ei ole sita milta nayttaa.\" ), ( 5 , 4 , 4 , \"Star Wars\" , 1977 , 121 , \"Gerge Lucasin masteriteos aloittaa Luke Skywalkerin tarinan kaukana galaksissa.\" ); INSERT INTO Nayttelijat ( NayttelijaID , ElokuvaID ) VALUES ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 5 , 5 ); INSERT INTO Arvostelija ( ArvostelijaID , ArvostelijaNimi ) VALUES ( 1 , \"Mikael\" ), ( 2 , \"Pekka\" ), ( 3 , \"Aleksi\" ); INSERT INTO Arvostelu ( ArvostelijaID , ElokuvaID , Arvosana ) VALUES ( 1 , 1 , 10 ), ( 1 , 2 , 9 ), ( 1 , 4 , 10 ), ( 1 , 5 , 10 ), ( 2 , 1 , 7 ), ( 2 , 3 , 6 ), ( 3 , 2 , 10 ), ( 3 , 4 , 4 ), ( 3 , 5 , 8 ); CREATE VIEW nakymainfo /* Luotu yksi n\u00e4kym\u00e4 joka tuo nimi\u00e4 monista tauluista ja laskee arvosteluiden keskiarvon elokuvittain. Tiedot pinotaan yhteen ElokuvaID:ll\u00e4 ja j\u00e4rjest\u00e4\u00e4 T\u00e4htien mukaan laskevassa j\u00e4rjestyksess\u00e4. */ AS SELECT KategoriaNimi AS Kategoria , ElokuvaNimi AS Elokuva , OhjaajaNimi AS Ohjaaja , NayttelijaNimi AS Nayttelija , AVG ( Arvosana ) AS Tahdet FROM Elokuva INNER JOIN Nayttelijat ON Elokuva . ElokuvaID = Nayttelijat . ElokuvaID INNER JOIN Nayttelija ON Nayttelijat . NayttelijaID = Nayttelija . NayttelijaID INNER JOIN Ohjaaja ON Elokuva . OhjaajaID = Ehjaaja . OhjaajaID INNER JOIN Kategoria ON Elokuva . KategoriaID = Kategoria . KategoriaID INNER JOIN Arvostelu ON Elokuva . ElokuvaID = Arvostelu . ElokuvaID GROUP BY Elokuva . ElokuvaID ORDER BY Tahdet DESC ; SQL-kyselyj\u00e4 \u00b6 SQL-kysely, joka hakee kaikki tietyn arvostelijan tekem\u00e4t arvostelut. Vapaavalintainen n\u00e4kym\u00e4, johon tulee t\u00e4rkeimm\u00e4t tiedot tietokannasta. K\u00e4ytt\u00f6liittym\u00e4 \u00b6 PHP on entuudestaan tuttu, vaikkenkaan ole siihen juuri koskenut 6-vuoteen, joten p\u00e4\u00e4tin tehd\u00e4 jonkinlaisen k\u00e4ytt\u00f6liittym\u00e4n. P\u00e4\u00e4dyin tekem\u00e4\u00e4n \"hakukoneen\", joka hakee kaikista tauluista haettua merkkijonoa. Kuvia demo liittym\u00e4st\u00e4: Haen hakusanalla \"luke\" Koodi l\u00f6yt\u00e4\u00e4 Luke sanan Star Wars elokuvan kuvauksesta. Valmista liittym\u00e4\u00e4 voi k\u00e4ytt\u00e4\u00e4 nettisivuillani, ja koodit ovat dokumentaation lopussa. K\u00e4ytt\u00f6liittym\u00e4: http://migza.com/tietokannat/ K\u00e4ytt\u00e4j\u00e4tunnus: migza Salasana: noetarvaa Itsearviointi \u00b6 Harjoitusty\u00f6n tekeminen oli mielek\u00e4st\u00e4 puuhaa ja sain siin\u00e4 lis\u00e4oppia entuudestaan tutusta SQL:st\u00e4 ja sain palautettua my\u00f6s PHP:n perustoimintoja. MkDocs:in asentaminen ja oppiminen oli aivan uusiasia ja markdownilla dokumentointia olen pitkin vuotta tehnytkin. Harmi vain etten saanut sit\u00e4 studentin labranettiin toimimaan. Aikaa kului noin. 40 tuntia. Olen tyytyv\u00e4inen dokumentaatioon ja iloinen, ett\u00e4 sain k\u00e4ytt\u00f6liittym\u00e4n toimimaan, ja sit\u00e4 aionkin jatkossa p\u00e4ivitt\u00e4\u00e4 paremmaksi, jotta sinne voi laittaa tietoa my\u00f6s, eik\u00e4 pelk\u00e4st\u00e4\u00e4n hakea niit\u00e4. Jonkinverran virheit\u00e4 tuli ty\u00f6t\u00e4 tietokantaa suunnittelussa ja tietokanta olisi voinut olla laajempikin. Arvosanaehdotus: 4. Koodit \u00b6 T\u00e4ss\u00e4 k\u00e4ytt\u00f6liittym\u00e4n koodit: index.php < html > < head > < title > Tietokannat </ title > < link rel = \"stylesheet\" href = \"tyylit.css\" > < script > function validateForm () { var x = document . forms [ \"myForm\" ][ \"form-name\" ]. value ; if ( x == \"\" ) { alert ( \"Sy\u00f6t\u00e4 kentt\u00e4\u00e4n teksti\u00e4\" ); return false ; } } </ script > </ head > < body > < header > < h1 >< a href = \"\" > Elokuvatietokanta </ a ></ h1 > </ header > < nav > < div class = \"haku\" > < form name = \"myForm\" action = \"\" onsubmit = \"return validateForm()\" method = \"post\" > < input type = \"text\" placeholder = \"Hae tietokannasta\" name = \"form-name\" > < input type = \"submit\" value = \"Hae\" > </ form > </ div > </ nav > <?php include 'form.php'; ?> < footer > Mikael Piirainen - AA2799@student.jamk.fi </ footer > </ body > </ html > form.php <?php if ( isset ( $_POST [ 'form-name' ])) { $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbname = \"elokuva_db\" ; $search = $_POST [ \"form-name\" ]; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"<div class='tulos'>\" ; echo \"<div class='tulos-sis\u00e4'>\" ; echo \"<h2>Elokuvat</h2>\" ; echo \"<hr>\" ; $sql = \"SELECT ElokuvaNimi, Vuosi, Kuvaus, Kesto, OhjaajaNimi, AVG(Arvosana) AS Tahdet, NayttelijaNimi, KategoriaNimi FROM Elokuva INNER JOIN Ohjaaja ON Elokuva.OhjaajaID = Ohjaaja.OhjaajaID INNER JOIN Arvostelu ON Elokuva.ElokuvaID = Arvostelu.ElokuvaID INNER JOIN Nayttelijat ON Elokuva.ElokuvaID = Nayttelijat.ElokuvaID INNER JOIN Nayttelija ON Nayttelijat.NayttelijaID = Nayttelija.NayttelijaID INNER JOIN Kategoria ON Elokuva.KategoriaID = Kategoria.KategoriaID WHERE ElokuvaNimi LIKE '%\" . $search . \"%' OR Vuosi LIKE '%\" . $search . \"%' OR Kuvaus LIKE '%\" . $search . \"%' OR NayttelijaNimi LIKE '%\" . $search . \"%' OR KategoriaNimi LIKE '%\" . $search . \"%' OR OhjaajaNimi LIKE '%\" . $search . \"%' GROUP BY Elokuva.ElokuvaID\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"<h3>\" . $row [ \"ElokuvaNimi\" ] . \"</h3>\" . \"Ohjaaja: \" . $row [ \"OhjaajaNimi\" ] . \"<br>\" . \"N\u00e4yttelij\u00e4: \" . $row [ \"NayttelijaNimi\" ] . \"<br><br>\" . \"Kategoria: \" . $row [ \"KategoriaNimi\" ] . \"<br>\" . \"Vuosi: \" . $row [ \"Vuosi\" ] . \"<br>\" . \"Kesto: \" . $row [ \"Kesto\" ] . \" min<br>\" . \"T\u00e4hdet: \" . $row [ \"Tahdet\" ] . \"<br><br>\" . \"Kuvaus: \" . $row [ \"Kuvaus\" ] . \"<br><hr>\" ; } } else { echo \"Ei tuloksia.\" ; } echo \"</div></div>\" ; $conn -> close (); } ?> tyylit.css @ import url ( 'https://fonts.googleapis.com/css2?family=Abel&display=swap' ) ; body { margin : 0 ; padding : 0 ; } . haku { font-family : Arial ; padding : 0 ; margin : 0 ; display : inline : block ; } . tulos { margin : 10 px 30 % ; display : block ; box-shadow : 0 0.25 em 0.5 em 0 rgba ( 0 , 0 , 0 , 0.2 ); padding : 20 px ; overflow : hidden ; } . tulos-sis\u00e4 { text-align : left ; font-family : arial ; overflow : hidden ; } form { padding : 0 ; margin : 10 ; } header { margin : 0 ; padding : 20 px 0 ; text-align : center ; background-color : #575757 ; } h1 { margin : 0 ; padding : 0 ; font-family : 'Abel' , sans-serif ; color : #f5f0f0 ; letter-spacing : 0.1 em ; } a : link , a : visited { color : #f5f0f0 ; background-color : transparent ; text-decoration : none ; } nav { background-color : grey ; padding : 0 ; margin : 0 ; text-align : center ; overflow : hidden ; display : block ; } footer { background-color : #575757 ; font-family : arial ; text-align : center ; margin-top : 20 px ; padding : 10 px ; color : #f5f0f0 ; } input [ type = text ] { width : 30 % ; padding : 12 px 20 px ; margin : 8 px 0 ; box-sizing : border-box ; } input [ type = submit ] { padding : 12 px 20 px ; text-decoration : none ; margin : 8 px 0 ; cursor : pointer ; box-sizing : border-box ; }","title":"Etusivu"},{"location":"#tietokannat-ttc2020-harjoitustyo","text":"Esittely video: Videon linkki","title":"Tietokannat TTC2020 - Harjoitusty\u00f6"},{"location":"#suunnitelma","text":"","title":"Suunnitelma"},{"location":"#vaatimusmaarittely","text":"Elokuvatietokanta \"elokuva_db\" -tietokanta Ty\u00f6ryhm\u00e4: Mikael Piirainen AA2799 Versio 1.0 1. Johdanto Tarkoituksena suunnitella ja luoda tietokanta, joka sis\u00e4lt\u00e4\u00e4 tietoa elokuvista, niiden arvosteluista ja n\u00e4yttelij\u00f6ist\u00e4 ja muusta. Tietokanta luodaan harjoitusty\u00f6n\u00e4 TTC2020 kurssilla, jota opettaa Ari Rantala. 2. Yleiskuvaus Tietokanta ty\u00f6stet\u00e4\u00e4n lokaalisti ja siirret\u00e4\u00e4n omalle palvelimelle, kun se on valmis. Tietokantaa varten luodaan k\u00e4ytt\u00f6liittym\u00e4, jolla voidaan hakea tietoja verkkosivulle. Toteutus tehd\u00e4\u00e4n MySQL Workbench:ill\u00e4 sek\u00e4 k\u00e4ytt\u00f6liittym\u00e4 tehd\u00e4\u00e4n PHP-ohjelmointi kielell\u00e4. Dokumentaatio kirjoitetaan GitHubiin ja julkaistaan sivustona hy\u00f6dynt\u00e4en MkDocs:ia. 3. Toiminnot Pakolliset toiminnot: Elokuvien tietojen tallennus Arvostelujen teko Elokuvien haku tietokannasta","title":"Vaatimusm\u00e4\u00e4rittely"},{"location":"#kasiteanalyysi","text":"K\u00e4site-ehdokkaat: Taulu Taulu Taulu Taulu Taulu ElokuvaID ElokuvaID Ohjaaja N\u00e4yttelij\u00e4t Arvostelu KategoriaID ElokuvaNimi ElokuvaNimi N\u00e4yttelij\u00e4 Arvostelija KategoriaNimi Kuvaus Kuvaus Vuosi Vuosi Ohjaaja Kesto N\u00e4yttelij\u00e4 Arvostelija Arvostelu KategoriaID KategoriaNimi Kesto N\u00e4yttelij\u00e4t Visuaalinen hahmotus ja lis\u00e4\u00e4 k\u00e4sitteit\u00e4: Hahmotus tehty draw.io sovelluksella. Perustelut ratkaisuille: Elokuva ja N\u00e4yttelij\u00e4 tauluilla on moni-moneen yhteys ja siihen syntyy liitostaulu N\u00e4yttelij\u00e4t. Is\u00e4nt\u00e4taulujen p\u00e4\u00e4avaimet toimivat liitostaulun viiteavaimina. Elokuvalla voi olla useita n\u00e4yttelij\u00f6it\u00e4 ja n\u00e4yttelij\u00e4t voivat olla useissa elokuvissa. Elokuva ja Arvostelija tauluilla samat perustelut kuin Elokuva - N\u00e4yttelij\u00e4tauluilla, lis\u00e4ksi liitostauluun lis\u00e4t\u00e4\u00e4n arvosana. Elokuva ja Kategoria tauluilla on yksi-moneen yhteys. Elokuva kuuluu kategoriaa ja kategoriaan voi kuulua useita elokuvia. (Tiedostan, ett\u00e4 useilla elokuvilla saatta olla monia kategorioita, mutta haluan t\u00e4h\u00e4n tietokantaan vain \"p\u00e4\u00e4 kategorian\"). Elokuva ja Ohjaaja tauluilla on yksi-moneen yhteys. Elokuvalla on yksi ohjaaja ja ohjaaja on voinut tehd\u00e4 monta elokuvaa. (T\u00e4m\u00e4 on yleisin elokuvasceness\u00e4, vaikkakin poikkeuksiakin l\u00f6ytyy: \"Russo Brothers: Avengers: Infinity War & Endgame, The Wachowskis: Matrix 1-3)","title":"K\u00e4siteanalyysi"},{"location":"#er-kaavio","text":"ER-kaavio tehty MySQL Workbenchi:ll\u00e4. Luovuin \"kansalaisuudesta\", koska sille pit\u00e4isi olla oma taulunsa, mutta se ei ole niin v\u00e4ltt\u00e4m\u00e4t\u00f6n elokuvatietokannassa.","title":"ER-kaavio"},{"location":"#tietokannan-toteutus","text":"","title":"Tietokannan toteutus"},{"location":"#tietokannan-luonti","text":"Tietokanta luodaan Workbenchin FORWARD ENGINEERING optiolla. Tietokanta ja taulut onnistuivat.","title":"Tietokannan luonti"},{"location":"#tietojen-lisays-tauluihin","text":"Nyt kun tietokanta on luotu onnistuneesti, niin sinne voidaan lis\u00e4t\u00e4 dataa. Tietojen lis\u00e4ys Kategoria tauluun: Tietojen lis\u00e4ys Ohjaaja tauluun. Tietojen lis\u00e4ys Nayttelija tauluun. Tietojen lis\u00e4ys Elokuva tauluun. Tietojen lis\u00e4ys Nayttelijat tauluun. Tietojen lis\u00e4ys Arvostelija tauluun. Tietojen lis\u00e4ys Arvostelu tauluun.","title":"Tietojen lis\u00e4ys tauluihin"},{"location":"#sql-skripti","text":"Tietokannan luonti skripti. -- ----------------------------------------------------- -- Schema elokuva_db -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS ` elokuva_db ` ; -- Luo kyseisen tietokannan, jos sit\u00e4 ei ole USE ` elokuva_db ` ; -- Ottaa luodun tietokannan k\u00e4ytt\u00f6\u00f6n tulevia komentoja varten -- ----------------------------------------------------- -- Table `Kategoria` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Kategoria ` ( -- Luo taulun Kategoria, jos sit\u00e4 ei ole ` KategoriaID ` INT NOT NULL , -- INT (numero) tyyppinen sarake ` KategoriaNimi ` VARCHAR ( 64 ) NOT NULL , -- Vaihtelevamerkki maksimissaan 64 merkki\u00e4 sarake PRIMARY KEY ( ` KategoriaID ` )) -- Taulun p\u00e4\u00e4avaimeksi valitaan KategoriaID ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Ohjaaja` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Ohjaaja ` ( ` OhjaajaID ` INT NOT NULL , ` OhjaajaNimi ` VARCHAR ( 64 ) NOT NULL , ` Ika ` INT ( 3 ) NOT NULL , -- INT on rajattu vain kolmilukuiseksi PRIMARY KEY ( ` OhjaajaID ` )) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Elokuva` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Elokuva ` ( ` ElokuvaID ` INT NOT NULL , ` OhjaajaID ` INT NOT NULL , ` KategoriaID ` INT NOT NULL , ` ElokuvaNimi ` VARCHAR ( 128 ) NOT NULL , ` Vuosi ` YEAR NOT NULL , -- sarake johon voi laittaa vain vuosiluvun ` Kesto ` INT ( 3 ) NOT NULL , ` Kuvaus ` VARCHAR ( 512 ) NOT NULL , PRIMARY KEY ( ` ElokuvaID ` ), INDEX ` fk_Elokuva_Kategoria1_idx ` ( ` KategoriaID ` ASC ), -- viitetaulujen m\u00e4\u00e4ritys INDEX ` fk_Elokuva_Ohjaaja1_idx ` ( ` OhjaajaID ` ASC ), CONSTRAINT ` fk_Elokuva_Kategoria1 ` FOREIGN KEY ( ` KategoriaID ` ) REFERENCES ` Kategoria ` ( ` KategoriaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Elokuva_Ohjaaja1 ` FOREIGN KEY ( ` OhjaajaID ` ) -- Ohjaajan id:t\u00e4 ei toimintaa poiston tai p\u00e4ivityksen yhteydess\u00e4 REFERENCES ` Ohjaaja ` ( ` OhjaajaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table Nayttelija` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Nayttelija ` ( ` NayttelijaID ` INT NOT NULL , ` NayttelijaNimi ` VARCHAR ( 64 ) NOT NULL , ` Ika ` INT ( 3 ) NOT NULL , PRIMARY KEY ( ` NayttelijaID ` )) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Nayttelijat` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Nayttelijat ` ( ` NayttelijaID ` INT NOT NULL , ` ElokuvaID ` INT NOT NULL , PRIMARY KEY ( ` NayttelijaID ` , ` ElokuvaID ` ), INDEX ` fk_Nayttelija_has_Elokuva_Elokuva1_idx ` ( ` ElokuvaID ` ASC ), INDEX ` fk_Nayttelija_has_Elokuva_Nayttelija_idx ` ( ` NayttelijaID ` ASC ), CONSTRAINT ` fk_Nayttelija_has_Elokuva_Nayttelija ` FOREIGN KEY ( ` NayttelijaID ` ) REFERENCES ` Nayttelija ` ( ` NayttelijaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Nayttelija_has_Elokuva_Elokuva1 ` FOREIGN KEY ( ` ElokuvaID ` ) REFERENCES ` Elokuva ` ( ` ElokuvaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Arvostelija` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Arvostelija ` ( ` ArvostelijaID ` INT NOT NULL , ` ArvostelijaNimi ` VARCHAR ( 32 ) NOT NULL , PRIMARY KEY ( ` ArvostelijaID ` )) ENGINE = InnoDB ; -- ----------------------------------------------------- -- Table `Arvostelu` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS ` Arvostelu ` ( ` ArvostelijaID ` INT NOT NULL , ` ElokuvaID ` INT NOT NULL , ` Arvosana ` INT ( 10 ) NOT NULL , PRIMARY KEY ( ` ArvostelijaID ` , ` ElokuvaID ` ), INDEX ` fk_Arvostelija_has_Elokuva_Elokuva1_idx ` ( ` ElokuvaID ` ASC ), INDEX ` fk_Arvostelija_has_Elokuva_Arvostelija1_idx ` ( ` ArvostelijaID ` ASC ), CONSTRAINT ` fk_Arvostelija_has_Elokuva_Arvostelija1 ` FOREIGN KEY ( ` ArvostelijaID ` ) REFERENCES ` Arvostelija ` ( ` ArvostelijaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Arvostelija_has_Elokuva_Elokuva1 ` FOREIGN KEY ( ` ElokuvaID ` ) REFERENCES ` Elokuva ` ( ` ElokuvaID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB ; -- Taulut tehty, t\u00e4st\u00e4 alkaa tietojen lis\u00e4ys INSERT INTO Kategoria ( KategoriaID , KategoriaNimi ) VALUES -- Lis\u00e4\u00e4 kategoria tauluun kyseiset arvot ( 1 , \"Action\" ), ( 2 , \"Crime\" ), ( 3 , \"Sci-Fi\" ), ( 4 , \"Space Opera\" ); INSERT INTO Ohjaaja ( OhjaajaID , OhjaajaNimi , Ika ) VALUES ( 1 , \"Cristopher Nolan\" , 47 ), ( 2 , \"Quentin Tarantino\" , 58 ), ( 3 , \"The Wachowskis\" , 55 ), ( 4 , \"George Lucas\" , 76 ); INSERT INTO Nayttelija ( NayttelijaID , NayttelijaNimi , Ika ) VALUES ( 1 , \"Christian Bale\" , 47 ), ( 2 , \"John Travolta\" , 67 ), ( 3 , \"Leonardo DiCaprio\" , 46 ), ( 4 , \"Keanu Reeves\" , 56 ), ( 5 , \"Mark Hamill\" , 69 ); INSERT INTO Elokuva ( ElokuvaID , OhjaajaID , KategoriaID , ElokuvaNimi , Vuosi , Kesto , Kuvaus ) VALUES ( 1 , 1 , 1 , \"The Dark Knight\" , 2008 , 152 , \"Christopher Nolanin ohjaama Batman trilogian toinen osa, jossa Batman kohtaa arkkivihollisensa Jokerin.\" ), ( 2 , 2 , 2 , \"Pulp Fiction\" , 1994 , 154 , \"Quentin Tarantinon klassikko-elokuva, joka on koostumus huumorista ja vakivallasta.\" ), ( 3 , 1 , 1 , \"Inception\" , 2010 , 148 , \"Christopher Nolandin ohjaama ja kasikirjoittama mielta mullistava seikkailu.\" ), ( 4 , 3 , 3 , \"Matrix\" , 1999 , 136 , \"Wachowskiesin ohjaama Sci-Fi elokuva kertoo sankari Neosta, joka huomaakin etta kaikki ei ole sita milta nayttaa.\" ), ( 5 , 4 , 4 , \"Star Wars\" , 1977 , 121 , \"Gerge Lucasin masteriteos aloittaa Luke Skywalkerin tarinan kaukana galaksissa.\" ); INSERT INTO Nayttelijat ( NayttelijaID , ElokuvaID ) VALUES ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 5 , 5 ); INSERT INTO Arvostelija ( ArvostelijaID , ArvostelijaNimi ) VALUES ( 1 , \"Mikael\" ), ( 2 , \"Pekka\" ), ( 3 , \"Aleksi\" ); INSERT INTO Arvostelu ( ArvostelijaID , ElokuvaID , Arvosana ) VALUES ( 1 , 1 , 10 ), ( 1 , 2 , 9 ), ( 1 , 4 , 10 ), ( 1 , 5 , 10 ), ( 2 , 1 , 7 ), ( 2 , 3 , 6 ), ( 3 , 2 , 10 ), ( 3 , 4 , 4 ), ( 3 , 5 , 8 ); CREATE VIEW nakymainfo /* Luotu yksi n\u00e4kym\u00e4 joka tuo nimi\u00e4 monista tauluista ja laskee arvosteluiden keskiarvon elokuvittain. Tiedot pinotaan yhteen ElokuvaID:ll\u00e4 ja j\u00e4rjest\u00e4\u00e4 T\u00e4htien mukaan laskevassa j\u00e4rjestyksess\u00e4. */ AS SELECT KategoriaNimi AS Kategoria , ElokuvaNimi AS Elokuva , OhjaajaNimi AS Ohjaaja , NayttelijaNimi AS Nayttelija , AVG ( Arvosana ) AS Tahdet FROM Elokuva INNER JOIN Nayttelijat ON Elokuva . ElokuvaID = Nayttelijat . ElokuvaID INNER JOIN Nayttelija ON Nayttelijat . NayttelijaID = Nayttelija . NayttelijaID INNER JOIN Ohjaaja ON Elokuva . OhjaajaID = Ehjaaja . OhjaajaID INNER JOIN Kategoria ON Elokuva . KategoriaID = Kategoria . KategoriaID INNER JOIN Arvostelu ON Elokuva . ElokuvaID = Arvostelu . ElokuvaID GROUP BY Elokuva . ElokuvaID ORDER BY Tahdet DESC ;","title":"SQL-skripti"},{"location":"#sql-kyselyja","text":"SQL-kysely, joka hakee kaikki tietyn arvostelijan tekem\u00e4t arvostelut. Vapaavalintainen n\u00e4kym\u00e4, johon tulee t\u00e4rkeimm\u00e4t tiedot tietokannasta.","title":"SQL-kyselyj\u00e4"},{"location":"#kayttoliittyma","text":"PHP on entuudestaan tuttu, vaikkenkaan ole siihen juuri koskenut 6-vuoteen, joten p\u00e4\u00e4tin tehd\u00e4 jonkinlaisen k\u00e4ytt\u00f6liittym\u00e4n. P\u00e4\u00e4dyin tekem\u00e4\u00e4n \"hakukoneen\", joka hakee kaikista tauluista haettua merkkijonoa. Kuvia demo liittym\u00e4st\u00e4: Haen hakusanalla \"luke\" Koodi l\u00f6yt\u00e4\u00e4 Luke sanan Star Wars elokuvan kuvauksesta. Valmista liittym\u00e4\u00e4 voi k\u00e4ytt\u00e4\u00e4 nettisivuillani, ja koodit ovat dokumentaation lopussa. K\u00e4ytt\u00f6liittym\u00e4: http://migza.com/tietokannat/ K\u00e4ytt\u00e4j\u00e4tunnus: migza Salasana: noetarvaa","title":"K\u00e4ytt\u00f6liittym\u00e4"},{"location":"#itsearviointi","text":"Harjoitusty\u00f6n tekeminen oli mielek\u00e4st\u00e4 puuhaa ja sain siin\u00e4 lis\u00e4oppia entuudestaan tutusta SQL:st\u00e4 ja sain palautettua my\u00f6s PHP:n perustoimintoja. MkDocs:in asentaminen ja oppiminen oli aivan uusiasia ja markdownilla dokumentointia olen pitkin vuotta tehnytkin. Harmi vain etten saanut sit\u00e4 studentin labranettiin toimimaan. Aikaa kului noin. 40 tuntia. Olen tyytyv\u00e4inen dokumentaatioon ja iloinen, ett\u00e4 sain k\u00e4ytt\u00f6liittym\u00e4n toimimaan, ja sit\u00e4 aionkin jatkossa p\u00e4ivitt\u00e4\u00e4 paremmaksi, jotta sinne voi laittaa tietoa my\u00f6s, eik\u00e4 pelk\u00e4st\u00e4\u00e4n hakea niit\u00e4. Jonkinverran virheit\u00e4 tuli ty\u00f6t\u00e4 tietokantaa suunnittelussa ja tietokanta olisi voinut olla laajempikin. Arvosanaehdotus: 4.","title":"Itsearviointi"},{"location":"#koodit","text":"T\u00e4ss\u00e4 k\u00e4ytt\u00f6liittym\u00e4n koodit: index.php < html > < head > < title > Tietokannat </ title > < link rel = \"stylesheet\" href = \"tyylit.css\" > < script > function validateForm () { var x = document . forms [ \"myForm\" ][ \"form-name\" ]. value ; if ( x == \"\" ) { alert ( \"Sy\u00f6t\u00e4 kentt\u00e4\u00e4n teksti\u00e4\" ); return false ; } } </ script > </ head > < body > < header > < h1 >< a href = \"\" > Elokuvatietokanta </ a ></ h1 > </ header > < nav > < div class = \"haku\" > < form name = \"myForm\" action = \"\" onsubmit = \"return validateForm()\" method = \"post\" > < input type = \"text\" placeholder = \"Hae tietokannasta\" name = \"form-name\" > < input type = \"submit\" value = \"Hae\" > </ form > </ div > </ nav > <?php include 'form.php'; ?> < footer > Mikael Piirainen - AA2799@student.jamk.fi </ footer > </ body > </ html > form.php <?php if ( isset ( $_POST [ 'form-name' ])) { $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbname = \"elokuva_db\" ; $search = $_POST [ \"form-name\" ]; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"<div class='tulos'>\" ; echo \"<div class='tulos-sis\u00e4'>\" ; echo \"<h2>Elokuvat</h2>\" ; echo \"<hr>\" ; $sql = \"SELECT ElokuvaNimi, Vuosi, Kuvaus, Kesto, OhjaajaNimi, AVG(Arvosana) AS Tahdet, NayttelijaNimi, KategoriaNimi FROM Elokuva INNER JOIN Ohjaaja ON Elokuva.OhjaajaID = Ohjaaja.OhjaajaID INNER JOIN Arvostelu ON Elokuva.ElokuvaID = Arvostelu.ElokuvaID INNER JOIN Nayttelijat ON Elokuva.ElokuvaID = Nayttelijat.ElokuvaID INNER JOIN Nayttelija ON Nayttelijat.NayttelijaID = Nayttelija.NayttelijaID INNER JOIN Kategoria ON Elokuva.KategoriaID = Kategoria.KategoriaID WHERE ElokuvaNimi LIKE '%\" . $search . \"%' OR Vuosi LIKE '%\" . $search . \"%' OR Kuvaus LIKE '%\" . $search . \"%' OR NayttelijaNimi LIKE '%\" . $search . \"%' OR KategoriaNimi LIKE '%\" . $search . \"%' OR OhjaajaNimi LIKE '%\" . $search . \"%' GROUP BY Elokuva.ElokuvaID\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"<h3>\" . $row [ \"ElokuvaNimi\" ] . \"</h3>\" . \"Ohjaaja: \" . $row [ \"OhjaajaNimi\" ] . \"<br>\" . \"N\u00e4yttelij\u00e4: \" . $row [ \"NayttelijaNimi\" ] . \"<br><br>\" . \"Kategoria: \" . $row [ \"KategoriaNimi\" ] . \"<br>\" . \"Vuosi: \" . $row [ \"Vuosi\" ] . \"<br>\" . \"Kesto: \" . $row [ \"Kesto\" ] . \" min<br>\" . \"T\u00e4hdet: \" . $row [ \"Tahdet\" ] . \"<br><br>\" . \"Kuvaus: \" . $row [ \"Kuvaus\" ] . \"<br><hr>\" ; } } else { echo \"Ei tuloksia.\" ; } echo \"</div></div>\" ; $conn -> close (); } ?> tyylit.css @ import url ( 'https://fonts.googleapis.com/css2?family=Abel&display=swap' ) ; body { margin : 0 ; padding : 0 ; } . haku { font-family : Arial ; padding : 0 ; margin : 0 ; display : inline : block ; } . tulos { margin : 10 px 30 % ; display : block ; box-shadow : 0 0.25 em 0.5 em 0 rgba ( 0 , 0 , 0 , 0.2 ); padding : 20 px ; overflow : hidden ; } . tulos-sis\u00e4 { text-align : left ; font-family : arial ; overflow : hidden ; } form { padding : 0 ; margin : 10 ; } header { margin : 0 ; padding : 20 px 0 ; text-align : center ; background-color : #575757 ; } h1 { margin : 0 ; padding : 0 ; font-family : 'Abel' , sans-serif ; color : #f5f0f0 ; letter-spacing : 0.1 em ; } a : link , a : visited { color : #f5f0f0 ; background-color : transparent ; text-decoration : none ; } nav { background-color : grey ; padding : 0 ; margin : 0 ; text-align : center ; overflow : hidden ; display : block ; } footer { background-color : #575757 ; font-family : arial ; text-align : center ; margin-top : 20 px ; padding : 10 px ; color : #f5f0f0 ; } input [ type = text ] { width : 30 % ; padding : 12 px 20 px ; margin : 8 px 0 ; box-sizing : border-box ; } input [ type = submit ] { padding : 12 px 20 px ; text-decoration : none ; margin : 8 px 0 ; cursor : pointer ; box-sizing : border-box ; }","title":"Koodit"}]}